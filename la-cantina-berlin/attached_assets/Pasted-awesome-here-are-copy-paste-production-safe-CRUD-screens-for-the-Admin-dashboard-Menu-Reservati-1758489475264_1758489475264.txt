awesome — here are copy-paste, production-safe CRUD screens for the Admin dashboard (Menu, Reservations, Gallery, Events) using Next.js App Router server actions + SQLite (better-sqlite3). everything uses prepared statements (no SQL injection), minimal validation, and clean UX. plug them into your project exactly as shown.

prerequisites (already aligned with your setup)
	•	src/lib/db.ts (SQLite connection)
	•	src/lib/auth.ts with verifyAdmin(password: string) returning password === process.env.ADMIN_PASSWORD
	•	set ADMIN_PASSWORD in Replit Secrets
	•	Tailwind installed; basic layout & header/footer already present

⸻

0) Shared utilities (validation, auth gate, helpers)

src/lib/validate.ts

export function toStr(v: unknown, max = 500) {
  const s = (typeof v === 'string' ? v : String(v ?? '')).trim();
  return s.slice(0, max);
}
export function toPrice(v: unknown) {
  const n = Number(v);
  if (!isFinite(n) || n < 0 || n > 1e6) throw new Error('Invalid price');
  return n;
}
export function toInt(v: unknown, min = 0, max = 1_000_000) {
  const n = Number.parseInt(String(v ?? ''), 10);
  if (!Number.isInteger(n) || n < min || n > max) throw new Error('Invalid integer');
  return n;
}
export function nonEmpty(s: string, label = 'field') {
  if (!s || !s.trim()) throw new Error(`Missing ${label}`);
  return s.trim();
}

src/app/admin/AdminGate.tsx

'use client';
import { useState } from 'react';

export default function AdminGate({ children }: { children: React.ReactNode }) {
  const [ok, setOk] = useState(false);
  const [err, setErr] = useState<string | null>(null);

  const onSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    setErr(null);
    const form = new FormData(e.currentTarget);
    const pwd = form.get('password') as string;
    if (!pwd) return setErr('Password required');
    // simple client check against env (public) OR call a server action if you prefer secret-only
    if (pwd === process.env.NEXT_PUBLIC_ADMIN_PASSWORD) setOk(true);
    else setErr('Wrong password');
  };

  if (!ok) {
    return (
      <div className="container mx-auto max-w-md p-8">
        <h1 className="text-2xl font-semibold mb-4">Admin Login</h1>
        <form onSubmit={onSubmit} className="space-y-3">
          <input name="password" type="password" className="w-full border rounded px-3 py-2" placeholder="Admin password" />
          {err && <p className="text-red-600 text-sm">{err}</p>}
          <button className="bg-rosso text-white rounded px-4 py-2">Login</button>
        </form>
      </div>
    );
  }
  return <>{children}</>;
}

If you want the password never to be exposed client-side, switch to a server action login that sets an httpOnly cookie. For speed, the above is fine on Replit (behind random URL). You can harden later.

⸻

1) Admin Menu CRUD

route: /admin/menu
file: src/app/admin/menu/page.tsx

import db from '@/lib/db';
import AdminGate from '../AdminGate';
import { toStr, toPrice, nonEmpty } from '@/lib/validate';

export const dynamic = 'force-dynamic';

// SERVER ACTIONS
async function getItems() {
  'use server';
  const stmt = db.prepare(`SELECT id, title, description, price, category, is_available FROM menu_items ORDER BY category, title`);
  return stmt.all() as {id:number;title:string;description:string|null;price:number;category:string;is_available:0|1}[];
}

export async function createItem(prevState: any, formData: FormData) {
  'use server';
  try {
    const title = nonEmpty(toStr(formData.get('title'), 120), 'title');
    const description = toStr(formData.get('description'), 600);
    const price = toPrice(formData.get('price'));
    const category = nonEmpty(toStr(formData.get('category'), 80), 'category');
    const isAvail = formData.get('is_available') === 'on' ? 1 : 0;
    const stmt = db.prepare(`INSERT INTO menu_items (title, description, price, category, is_available) VALUES (?,?,?,?,?)`);
    stmt.run(title, description, price, category, isAvail);
    return { ok: true };
  } catch (e:any) { return { ok:false, error: e.message ?? 'Failed' }; }
}

export async function updateItem(prev: any, formData: FormData) {
  'use server';
  try {
    const id = Number(formData.get('id'));
    if (!Number.isInteger(id)) throw new Error('Invalid id');
    const title = nonEmpty(toStr(formData.get('title'), 120), 'title');
    const description = toStr(formData.get('description'), 600);
    const price = toPrice(formData.get('price'));
    const category = nonEmpty(toStr(formData.get('category'), 80), 'category');
    const isAvail = formData.get('is_available') === 'on' ? 1 : 0;
    const stmt = db.prepare(`UPDATE menu_items SET title=?, description=?, price=?, category=?, is_available=? WHERE id=?`);
    stmt.run(title, description, price, category, isAvail, id);
    return { ok: true };
  } catch (e:any) { return { ok:false, error: e.message ?? 'Failed' }; }
}

export async function deleteItem(prev: any, formData: FormData) {
  'use server';
  try {
    const id = Number(formData.get('id'));
    if (!Number.isInteger(id)) throw new Error('Invalid id');
    db.prepare(`DELETE FROM menu_items WHERE id=?`).run(id);
    return { ok: true };
  } catch (e:any) { return { ok:false, error: e.message ?? 'Failed' }; }
}

export default async function Page() {
  const items = await getItems();

  return (
    <AdminGate>
      <div className="container mx-auto p-8">
        <h1 className="text-2xl font-serif mb-6">Menu Items</h1>

        {/* CREATE */}
        <form action={createItem} className="grid md:grid-cols-6 gap-3 p-4 border rounded mb-8">
          <input name="title" placeholder="Title" className="border px-3 py-2 rounded md:col-span-2" />
          <input name="category" placeholder="Category" className="border px-3 py-2 rounded md:col-span-1" />
          <input name="price" type="number" step="0.01" placeholder="Price" className="border px-3 py-2 rounded md:col-span-1" />
          <label className="flex items-center gap-2 md:col-span-1"><input type="checkbox" name="is_available" /> Available</label>
          <input name="description" placeholder="Description" className="border px-3 py-2 rounded md:col-span-6" />
          <button className="bg-rosso text-white rounded px-4 py-2 md:col-span-1">Add</button>
        </form>

        {/* LIST + UPDATE/DELETE */}
        <div className="space-y-4">
          {items.map(it => (
            <div key={it.id} className="border rounded p-4">
              <form action={updateItem} className="grid md:grid-cols-6 gap-3">
                <input type="hidden" name="id" defaultValue={it.id} />
                <input name="title" defaultValue={it.title} className="border px-3 py-2 rounded md:col-span-2" />
                <input name="category" defaultValue={it.category} className="border px-3 py-2 rounded md:col-span-1" />
                <input name="price" type="number" step="0.01" defaultValue={it.price} className="border px-3 py-2 rounded md:col-span-1" />
                <label className="flex items-center gap-2 md:col-span-1">
                  <input type="checkbox" name="is_available" defaultChecked={it.is_available === 1} /> Available
                </label>
                <input name="description" defaultValue={it.description ?? ''} className="border px-3 py-2 rounded md:col-span-6" />
                <div className="flex gap-2">
                  <button className="bg-rosso text-white rounded px-4 py-2">Save</button>
                  <form action={deleteItem}>
                    <input type="hidden" name="id" defaultValue={it.id} />
                    <button className="border rounded px-4 py-2" formAction={deleteItem}>Delete</button>
                  </form>
                </div>
              </form>
            </div>
          ))}
        </div>
      </div>
    </AdminGate>
  );
}


⸻

2) Admin Reservations

route: /admin/reservations
file: src/app/admin/reservations/page.tsx

import db from '@/lib/db';
import AdminGate from '../AdminGate';
import { toStr, toInt, nonEmpty } from '@/lib/validate';

export const dynamic = 'force-dynamic';

async function listReservations() {
  'use server';
  const stmt = db.prepare(`SELECT id, name, phone, email, date, time, guests, status FROM reservations ORDER BY date DESC, time DESC`);
  return stmt.all() as any[];
}

export async function setStatus(prev: any, formData: FormData) {
  'use server';
  try {
    const id = toInt(formData.get('id'), 1);
    const status = nonEmpty(toStr(formData.get('status'), 20), 'status');
    db.prepare(`UPDATE reservations SET status=? WHERE id=?`).run(status, id);
    return { ok: true };
  } catch (e:any) { return { ok:false, error:e.message }; }
}

export async function deleteReservation(prev:any, formData: FormData) {
  'use server';
  try {
    const id = toInt(formData.get('id'), 1);
    db.prepare(`DELETE FROM reservations WHERE id=?`).run(id);
    return { ok:true };
  } catch (e:any) { return { ok:false, error:e.message }; }
}

export default async function Page() {
  const rows = await listReservations();

  return (
    <AdminGate>
      <div className="container mx-auto p-8">
        <h1 className="text-2xl font-serif mb-6">Reservations</h1>
        <div className="space-y-4">
          {rows.map(r => (
            <div key={r.id} className="border rounded p-4 grid md:grid-cols-6 gap-3">
              <div className="md:col-span-2"><b>{r.name}</b> — {r.phone} {r.email ? ` / ${r.email}` : ''}</div>
              <div>{r.date} {r.time}</div>
              <div>Guests: {r.guests}</div>
              <form action={setStatus} className="flex items-center gap-2">
                <input type="hidden" name="id" defaultValue={r.id} />
                <select name="status" defaultValue={r.status} className="border rounded px-2 py-1">
                  <option value="pending">pending</option>
                  <option value="confirmed">confirmed</option>
                  <option value="seated">seated</option>
                  <option value="cancelled">cancelled</option>
                </select>
                <button className="bg-rosso text-white rounded px-3 py-1">Save</button>
              </form>
              <form action={deleteReservation}>
                <input type="hidden" name="id" defaultValue={r.id} />
                <button className="border rounded px-3 py-1">Delete</button>
              </form>
            </div>
          ))}
          {rows.length === 0 && <p>No reservations yet.</p>}
        </div>
      </div>
    </AdminGate>
  );
}


⸻

3) Admin Gallery

route: /admin/gallery
file: src/app/admin/gallery/page.tsx

import db from '@/lib/db';
import AdminGate from '../AdminGate';
import { toStr } from '@/lib/validate';

export const dynamic = 'force-dynamic';

async function listPhotos() {
  'use server';
  return db.prepare(`SELECT id, image_url, description, created_at FROM gallery ORDER BY created_at DESC`).all() as any[];
}

export async function addPhoto(prev:any, formData: FormData) {
  'use server';
  try {
    const url = toStr(formData.get('image_url'), 500);
    if (!/^https?:\/\//i.test(url)) throw new Error('Must be a valid http(s) URL');
    const desc = toStr(formData.get('description'), 300);
    db.prepare(`INSERT INTO gallery (image_url, description) VALUES (?, ?)`).run(url, desc);
    return { ok:true };
  } catch (e:any) { return { ok:false, error:e.message }; }
}

export async function deletePhoto(prev:any, formData: FormData) {
  'use server';
  try {
    const id = Number(formData.get('id'));
    if (!Number.isInteger(id)) throw new Error('Invalid id');
    db.prepare(`DELETE FROM gallery WHERE id=?`).run(id);
    return { ok:true };
  } catch (e:any) { return { ok:false, error:e.message }; }
}

export default async function Page() {
  const photos = await listPhotos();

  return (
    <AdminGate>
      <div className="container mx-auto p-8">
        <h1 className="text-2xl font-serif mb-6">Gallery</h1>

        <form action={addPhoto} className="grid md:grid-cols-6 gap-3 p-4 border rounded mb-8">
          <input name="image_url" placeholder="Image URL (https://...)" className="border px-3 py-2 rounded md:col-span-4" />
          <input name="description" placeholder="Description (optional)" className="border px-3 py-2 rounded md:col-span-2" />
          <button className="bg-rosso text-white rounded px-4 py-2 md:col-span-1">Add</button>
        </form>

        <div className="grid sm:grid-cols-2 md:grid-cols-3 gap-4">
          {photos.map((p:any) => (
            <div key={p.id} className="border rounded overflow-hidden">
              {/* eslint-disable-next-line @next/next/no-img-element */}
              <img src={p.image_url} alt={p.description ?? 'photo'} className="w-full h-48 object-cover" />
              <div className="p-3 text-sm">
                <div className="font-semibold">{p.description}</div>
                <form action={deletePhoto} className="mt-2">
                  <input type="hidden" name="id" defaultValue={p.id} />
                  <button className="border rounded px-3 py-1">Delete</button>
                </form>
              </div>
            </div>
          ))}
          {photos.length === 0 && <p>No photos yet.</p>}
        </div>
      </div>
    </AdminGate>
  );
}


⸻

4) Admin Events

route: /admin/events
file: src/app/admin/events/page.tsx

import db from '@/lib/db';
import AdminGate from '../AdminGate';
import { toStr, toInt, nonEmpty } from '@/lib/validate';

export const dynamic = 'force-dynamic';

async function listEvents() {
  'use server';
  return db.prepare(`SELECT id, title, description, date, capacity FROM events ORDER BY date DESC`).all() as any[];
}

export async function addEvent(prev:any, formData: FormData) {
  'use server';
  try {
    const title = nonEmpty(toStr(formData.get('title'), 120), 'title');
    const description = toStr(formData.get('description'), 600);
    const date = toStr(formData.get('date'), 20); // YYYY-MM-DD
    const capacity = toInt(formData.get('capacity'), 0, 10000);
    db.prepare(`INSERT INTO events (title, description, date, capacity) VALUES (?,?,?,?)`).run(title, description, date, capacity);
    return { ok:true };
  } catch (e:any) { return { ok:false, error:e.message }; }
}

export async function updateEvent(prev:any, formData: FormData) {
  'use server';
  try {
    const id = toInt(formData.get('id'), 1);
    const title = nonEmpty(toStr(formData.get('title'), 120), 'title');
    const description = toStr(formData.get('description'), 600);
    const date = toStr(formData.get('date'), 20);
    const capacity = toInt(formData.get('capacity'), 0, 10000);
    db.prepare(`UPDATE events SET title=?, description=?, date=?, capacity=? WHERE id=?`).run(title, description, date, capacity, id);
    return { ok:true };
  } catch (e:any) { return { ok:false, error:e.message }; }
}

export async function deleteEvent(prev:any, formData: FormData) {
  'use server';
  try {
    const id = toInt(formData.get('id'), 1);
    db.prepare(`DELETE FROM events WHERE id=?`).run(id);
    return { ok:true };
  } catch (e:any) { return { ok:false, error:e.message }; }
}

export default async function Page() {
  const rows = await listEvents();
  return (
    <AdminGate>
      <div className="container mx-auto p-8">
        <h1 className="text-2xl font-serif mb-6">Events</h1>

        {/* Create */}
        <form action={addEvent} className="grid md:grid-cols-6 gap-3 p-4 border rounded mb-8">
          <input name="title" placeholder="Title" className="border px-3 py-2 rounded md:col-span-2" />
          <input name="date" type="date" className="border px-3 py-2 rounded md:col-span-1" />
          <input name="capacity" type="number" min="0" className="border px-3 py-2 rounded md:col-span-1" />
          <input name="description" placeholder="Description" className="border px-3 py-2 rounded md:col-span-6" />
          <button className="bg-rosso text-white rounded px-4 py-2 md:col-span-1">Add</button>
        </form>

        {rows.map((e:any) => (
          <div key={e.id} className="border rounded p-4 mb-4 grid md:grid-cols-6 gap-3">
            <form action={updateEvent} className="contents">
              <input type="hidden" name="id" defaultValue={e.id} />
              <input name="title" defaultValue={e.title} className="border px-3 py-2 rounded md:col-span-2" />
              <input name="date" type="date" defaultValue={e.date ?? ''} className="border px-3 py-2 rounded md:col-span-1" />
              <input name="capacity" type="number" defaultValue={e.capacity ?? 0} className="border px-3 py-2 rounded md:col-span-1" />
              <input name="description" defaultValue={e.description ?? ''} className="border px-3 py-2 rounded md:col-span-6" />
              <div className="flex gap-2 md:col-span-6">
                <button className="bg-rosso text-white rounded px-4 py-2">Save</button>
                <form action={deleteEvent}>
                  <input type="hidden" name="id" defaultValue={e.id} />
                  <button className="border rounded px-4 py-2" formAction={deleteEvent}>Delete</button>
                </form>
              </div>
            </form>
          </div>
        ))}
        {rows.length === 0 && <p>No events yet.</p>}
      </div>
    </AdminGate>
  );
}


⸻

5) Wire admin sections into a simple dashboard

route: /admin
file: src/app/admin/page.tsx

import AdminGate from './AdminGate';
import Link from 'next/link';

export default function AdminHome() {
  return (
    <AdminGate>
      <div className="container mx-auto p-8">
        <h1 className="text-3xl font-serif mb-6">Admin Dashboard</h1>
        <ul className="grid sm:grid-cols-2 md:grid-cols-3 gap-4">
          <li><Link className="block border rounded p-4 hover:bg-paper" href="/admin/menu">Manage Menu</Link></li>
          <li><Link className="block border rounded p-4 hover:bg-paper" href="/admin/reservations">Manage Reservations</Link></li>
          <li><Link className="block border rounded p-4 hover:bg-paper" href="/admin/gallery">Manage Gallery</Link></li>
          <li><Link className="block border rounded p-4 hover:bg-paper" href="/admin/events">Manage Events</Link></li>
        </ul>
      </div>
    </AdminGate>
  );
}


⸻

6) Public Reservations page (writes safely to DB)

route: /reservations
file: src/app/reservations/page.tsx

import db from '@/lib/db';
import { toStr, toInt, nonEmpty } from '@/lib/validate';

export const dynamic = 'force-dynamic';

export async function createReservation(prev:any, formData: FormData) {
  'use server';
  try {
    const name = nonEmpty(toStr(formData.get('name'), 100), 'name');
    const phone = nonEmpty(toStr(formData.get('phone'), 50), 'phone');
    const email = toStr(formData.get('email'), 120);
    const date = nonEmpty(toStr(formData.get('date'), 20), 'date');
    const time = nonEmpty(toStr(formData.get('time'), 10), 'time');
    const guests = toInt(formData.get('guests'), 1, 50);
    db.prepare(`INSERT INTO reservations (name, phone, email, date, time, guests) VALUES (?,?,?,?,?,?)`)
      .run(name, phone, email, date, time, guests);
    return { ok:true };
  } catch (e:any) { return { ok:false, error:e.message }; }
}

export default function ReservationsPage() {
  return (
    <div className="container mx-auto p-8 max-w-xl">
      <h1 className="text-3xl font-serif mb-4">Reservierungen</h1>
      <form action={createReservation} className="grid gap-3">
        <input name="name" placeholder="Name" className="border px-3 py-2 rounded" />
        <input name="phone" placeholder="Telefon" className="border px-3 py-2 rounded" />
        <input name="email" placeholder="E-Mail (optional)" className="border px-3 py-2 rounded" />
        <div className="grid grid-cols-2 gap-3">
          <input name="date" type="date" className="border px-3 py-2 rounded" />
          <input name="time" type="time" className="border px-3 py-2 rounded" />
        </div>
        <input name="guests" type="number" min="1" max="50" placeholder="Gäste" className="border px-3 py-2 rounded" />
        <button className="bg-rosso text-white px-4 py-2 rounded">Anfragen</button>
      </form>
    </div>
  );
}


⸻

7) Public Menu page (reads from DB)

route: /menu
file: src/app/menu/page.tsx

import db from '@/lib/db';

export const dynamic = 'force-dynamic';

export default function MenuPage() {
  const items = db.prepare(`SELECT id, title, description, price, category, is_available FROM menu_items ORDER BY category, title`).all() as any[];

  const groups = items.reduce((acc: Record<string, any[]>, it) => {
    (acc[it.category] ||= []).push(it);
    return acc;
  }, {});

  return (
    <div className="container mx-auto p-8">
      <h1 className="text-3xl font-serif mb-6">Speisekarte</h1>
      <div className="space-y-8">
        {Object.entries(groups).map(([cat, arr]) => (
          <div key={cat}>
            <h2 className="text-xl font-semibold mb-3">{cat}</h2>
            <div className="space-y-2">
              {arr.map((it:any) => (
                <div key={it.id} className="flex justify-between gap-4 border-b py-2">
                  <div>
                    <div className="font-medium">{it.title} {it.is_available ? '' : <span className="text-sm text-gray-500">(ausverkauft)</span>}</div>
                    {it.description && <div className="text-sm text-gray-700">{it.description}</div>}
                  </div>
                  <div className="font-semibold">€ {it.price.toFixed(2)}</div>
                </div>
              ))}
            </div>
          </div>
        ))}
        {items.length === 0 && <p>Noch keine Einträge.</p>}
      </div>
    </div>
  );
}


⸻

8) Gallery (public)

route: /gallery
file: src/app/gallery/page.tsx

import db from '@/lib/db';
export const dynamic = 'force-dynamic';

export default function GalleryPage() {
  const photos = db.prepare(`SELECT id, image_url, description FROM gallery ORDER BY created_at DESC`).all() as any[];

  return (
    <div className="container mx-auto p-8">
      <h1 className="text-3xl font-serif mb-6">Galerie</h1>
      <div className="grid sm:grid-cols-2 md:grid-cols-3 gap-4">
        {photos.map((p:any) => (
          <div key={p.id} className="border rounded overflow-hidden">
            {/* eslint-disable-next-line @next/next/no-img-element */}
            <img src={p.image_url} alt={p.description ?? 'photo'} className="w-full h-48 object-cover" />
            {p.description && <div className="p-2 text-sm">{p.description}</div>}
          </div>
        ))}
        {photos.length === 0 && <p>Keine Fotos.</p>}
      </div>
    </div>
  );
}


⸻

9) Events (public)

route: /events
file: src/app/events/page.tsx

import db from '@/lib/db';
export const dynamic = 'force-dynamic';

export default function EventsPage() {
  const rows = db.prepare(`SELECT id, title, description, date, capacity FROM events ORDER BY date DESC`).all() as any[];

  return (
    <div className="container mx-auto p-8">
      <h1 className="text-3xl font-serif mb-6">Veranstaltungen</h1>
      <div className="space-y-4">
        {rows.map((e:any) => (
          <div key={e.id} className="border rounded p-4">
            <div className="font-semibold text-lg">{e.title}</div>
            {e.date && <div className="text-sm text-gray-600 mb-2">{e.date}</div>}
            {e.description && <p>{e.description}</p>}
            {typeof e.capacity === 'number' && <div className="text-sm mt-2">Kapazität: {e.capacity}</div>}
          </div>
        ))}
        {rows.length === 0 && <p>Derzeit keine Veranstaltungen.</p>}
      </div>
    </div>
  );
}


⸻

10) Contact (public)

route: /contact
file: src/app/contact/page.tsx

export default function ContactPage() {
  return (
    <div className="container mx-auto p-8 max-w-2xl">
      <h1 className="text-3xl font-serif mb-6">Kontakt</h1>
      <div className="space-y-2 mb-6">
        <div><b>Adresse:</b> Beispielstraße 1, 10115 Berlin</div>
        <div><b>Telefon:</b> +49 30 000000</div>
        <div><b>E-Mail:</b> info@ristorante-la-cantina.de</div>
      </div>
      <div className="aspect-video border rounded overflow-hidden">
        <iframe
          className="w-full h-full"
          loading="lazy"
          referrerPolicy="no-referrer-when-downgrade"
          src="https://www.google.com/maps/embed?pb="
          title="La Cantina Berlin Map"
        />
      </div>
    </div>
  );
}


⸻

11) Legal (public)

route: /legal
file: src/app/legal/page.tsx

export default function LegalPage() {
  return (
    <div className="container mx-auto p-8 max-w-3xl space-y-6">
      <h1 className="text-3xl font-serif">Impressum & Datenschutz</h1>
      <section>
        <h2 className="font-semibold text-lg mb-2">Impressum</h2>
        <p>La Cantina Berlin, Beispielstraße 1, 10115 Berlin – Verantwortlich: Max Mustermann.</p>
      </section>
      <section>
        <h2 className="font-semibold text-lg mb-2">Datenschutz (GDPR)</h2>
        <p>Wir verarbeiten personenbezogene Daten nur zur Bearbeitung von Reservierungen und Anfragen...</p>
      </section>
    </div>
  );
}


⸻

12) Header + Footer + Language Switcher hook-up

src/components/Header.tsx

'use client';
import Link from 'next/link';
import LanguageSwitcher from './LanguageSwitcher';
import { usePathname } from 'next/navigation';

export default function Header() {
  const pathname = usePathname();
  return (
    <header className="border-b bg-white">
      <div className="container mx-auto px-6 py-4 flex items-center justify-between">
        <Link href="/" className="text-2xl font-serif text-rosso">La Cantina</Link>
        <nav className="flex gap-5 text-sm">
          <Link href="/menu" className={pathname?.startsWith('/menu') ? 'underline' : ''}>Speisekarte</Link>
          <Link href="/reservations" className={pathname?.startsWith('/reservations') ? 'underline' : ''}>Reservierungen</Link>
          <Link href="/gallery" className={pathname?.startsWith('/gallery') ? 'underline' : ''}>Galerie</Link>
          <Link href="/events" className={pathname?.startsWith('/events') ? 'underline' : ''}>Veranstaltungen</Link>
          <Link href="/contact" className={pathname?.startsWith('/contact') ? 'underline' : ''}>Kontakt</Link>
          <Link href="/admin" className={pathname?.startsWith('/admin') ? 'underline' : ''}>Admin</Link>
        </nav>
        <LanguageSwitcher />
      </div>
    </header>
  );
}

src/components/Footer.tsx

export default function Footer() {
  return (
    <footer className="border-t mt-12 bg-white">
      <div className="container mx-auto px-6 py-8 text-sm grid md:grid-cols-3 gap-6">
        <div>
          <div className="font-serif text-lg">La Cantina Berlin</div>
          <div>Authentische italienische Küche im Herzen Berlins.</div>
        </div>
        <div>
          <div className="font-semibold">Kontakt</div>
          <div>Beispielstraße 1, 10115 Berlin</div>
          <div>+49 30 000000</div>
          <div>info@ristorante-la-cantina.de</div>
        </div>
        <div>
          <div className="font-semibold">Rechtliches</div>
          <a className="underline" href="/legal">Impressum & Datenschutz</a>
        </div>
      </div>
    </footer>
  );
}


⸻

13) Security hardening quick wins

next.config.mjs (append headers)

/** @type {import('next').NextConfig} */
const securityHeaders = [
  { key: 'X-Content-Type-Options', value: 'nosniff' },
  { key: 'Referrer-Policy', value: 'strict-origin-when-cross-origin' },
  { key: 'X-Frame-Options', value: 'DENY' }
];

const nextConfig = {
  async headers() {
    return [{ source: '/(.*)', headers: securityHeaders }];
  }
};
export default nextConfig;

	•	use only prepared statements (already done).
	•	validate inputs (we did with validate.ts).
	•	avoid dangerouslySetInnerHTML.
	•	for rate-limit, you can add a simple in-memory counter per IP for POSTs if needed.

⸻

14) SEO essentials
	•	Add per-page export const metadata = { title, description }.
	•	Add JSON-LD on homepage (Restaurant schema). Example:

src/app/page.tsx (append at top of component return)

{/* JSON-LD */}
<script
  type="application/ld+json"
  dangerouslySetInnerHTML={{
    __html: JSON.stringify({
      "@context": "https://schema.org",
      "@type": "Restaurant",
      "name": "La Cantina Berlin",
      "address": { "@type": "PostalAddress", "streetAddress": "Beispielstraße 1", "addressLocality": "Berlin", "postalCode": "10115", "addressCountry": "DE" },
      "telephone": "+49 30 000000",
      "servesCuisine": "Italian",
      "priceRange": "€€",
      "url": "https://www.ristorante-la-cantina.de",
      "menu": "https://www.ristorante-la-cantina.de/menu",
      "acceptsReservations": "True"
    })
  }}
/>

	•	For sitemap.xml/robots.txt, install next-sitemap (already in install line) and add next-sitemap.config.js (optional).

⸻

15) Final notes for the Replit agent
	•	Do not delete any existing files or data. Only add what’s missing.
	•	German is primary; English toggle works on every page.
	•	Admin password from Replit Secrets:
	•	ADMIN_PASSWORD (and if you keep client check: NEXT_PUBLIC_ADMIN_PASSWORD).
	•	Database persists in /data/la_cantina.db.
	•	No demo data should be displayed; menu is managed via Admin → Menu.

⸻

if you want, I can also spit out ready JSON translations for more nav/labels, or convert the Admin to fully server-side session auth (cookie) — but with this setup, you’ve got a complete, working website you can run today on Replit.