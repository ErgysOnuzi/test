Do this to publish on Replit reliably with Next.js:

0) Pre-reqs
	•	NODE_ENV=production
	•	Ensure next, react, react-dom are in "dependencies" (not "devDependencies").
	•	Delete cache and reinstall:

rm -rf .next node_modules
npm install



1) package.json scripts

{
  "scripts": {
    "build": "NEXT_TELEMETRY_DISABLED=1 next build",
    "start": "node server.js",
    "start:replit": "next start -p $PORT"
  },
  "dependencies": {
    "next": "15.x",
    "react": "18.x",
    "react-dom": "18.x"
  }
}

If you don’t use a custom server, keep "start:replit" and skip server.js.

2) Minimal next.config.mjs (production-safe)

/** @type {import('next').NextConfig} */
const config = {
  reactStrictMode: true,
  swcMinify: true,
  compress: true,
  images: { formats: ['image/avif', 'image/webp'] },
  experimental: { turbopack: {} }, // replaces deprecated experimental.turbo
  productionBrowserSourceMaps: false,
  poweredByHeader: false,
};
export default config;

3) If your repl uses Nix, pin Node 20/22

Create or update replit.nix:

{ pkgs }: {
  deps = [
    (pkgs.nodejs_22)
    pkgs.nodePackages.pnpm
    pkgs.pkg-config
  ];
}

Then in the Shell:

rm -rf node_modules
pnpm i || npm i

4) Workspace “Run” (for local testing)

Set the Run command to:

npm run build && npm run start:replit

The app must listen on $PORT; next start -p $PORT already handles it.

5) Deployments tab (the real publish)
	•	Type: Web Server
	•	Install/Build command:
npm ci && npm run build
	•	Run command:
npm run start:replit
	•	Environment variables: add all required secrets + NODE_ENV=production + NEXT_TELEMETRY_DISABLED=1
	•	Health check path: /
	•	Auto-deploy on push: off (optional, but keeps noise down)

Ignore the “AI generated suggestions” failure. It’s Replit’s helper, not your app. The above explicit commands bypass it.

6) Common build-breakers to fix before deploying
	•	Client component importing server-only modules (move to server or dynamic import with ssr:false).
	•	Missing images.remotePatterns for external images (add if you load remote images).
	•	Type-only imports leaking into runtime (use import type).
	•	ESLint/Type errors blocking build; run NEXT_TELEMETRY_DISABLED=1 npm run build in Shell and fix the first error shown.

7) Post-deploy speed hardening (fast publish)
	•	Turn on ISR for read-most pages:

export const revalidate = 300;


	•	Ensure no cache: 'no-store' on public data routes.
	•	Serve AVIF/WEBP and cap hero images ≤1600px. Replace raw JPEGs.
	•	Dynamic-import admin/heavy components:

const AdminChart = dynamic(() => import('./AdminChart'), { ssr: false });



8) If deploy still red

Run in Shell and read the first error line:

NEXT_TELEMETRY_DISABLED=1 NODE_ENV=production npm run build --no-cache

Fix exactly what it prints, then re-run the Deploy.