Paste this to Replit Agent. Do not deviate.

⸻

Task: Configure Secrets, Verify, then Continue With Full Implementation
	1.	Add these secrets in Replit → Tools → Secrets

SESSION_SECRET=VxTJMfUYyrJLEINx9HYSVkPLhnh6RoEFbgHHGlUJwFVqD194eP+++cbQUE5o/XupL3oNonRw5LJECjZBT8fG8Q==
JWT_SECRET=c08f59b9f7c74a71d0199f84e0e0af0f2f308ff1d02ac3e6a0e37f8dfe5b6d67

# Postgres (Neon)
DATABASE_URL=postgresql://neondb_owner:npg_Wgz8f6dJwVLn@ep-late-glitter-ae4xj5yt.c-2.us-east-2.aws.neon.tech/neondb?sslmode=require
PGDATABASE=neondb
PGHOST=ep-late-glitter-ae4xj5yt.c-2.us-east-2.aws.neon.tech
PGPORT=5432
PGUSER=neondb_owner
PGPASSWORD=npg_Wgz8f6dJwVLn

# Admin
ADMIN_PASSWORD=Xharie123_

# Google APIs
GOOGLE_API_KEY=AIzaSyDo_EekhImR0xBGZWyvMdyPA9yrwzR7BRU
GOOGLE_PLACES_API_KEY=AIzaSyDo_EekhImR0xBGZWyvMdyPA9yrwzR7BRU
GOOGLE_PLACE_ID=ChIJ3Q_UoOShqEcRcfGCHXGoohw

# S3-compatible storage (leave empty for now; wire later)
STORAGE_ACCESS_KEY=
STORAGE_SECRET_KEY=
STORAGE_BUCKET=
STORAGE_ENDPOINT=

Do not add any GitHub personal access token as a runtime secret.
	2.	Add boot-time env guard

	•	On server start, assert all of the above are non-empty (except the four storage variables for now). If any required var is missing → process.exit(1) with a clear console error.

	3.	Add health/readiness/version routes

	•	GET /api/health → {"status":"ok"}
	•	GET /api/ready → run SELECT 1 against Neon; return {"db":"ok"} or 500 with {"db":"fail","error":"…"}. When storage is configured, also HEAD a known bucket URL and include {"storage":"ok"}.
	•	GET /api/version → {git:"<commit_sha>", builtAt:"<ISO8601>"} baked at build.

	4.	SSR for landing + menu

	•	Ensure the root page and menu page render HTML on first request (no empty shell). If Next.js: convert to server components; set export const revalidate = 300. If Vite/Node: implement SSR render. Acceptance: curl -I <host> returns content-type: text/html and the HTML includes the page <title>.

	5.	Admin auth

	•	/admin requires JWT cookie. Add:
	•	POST /api/auth/login (checks ADMIN_PASSWORD), returns JWT (httpOnly, secure, SameSite=Lax, 1h)
	•	POST /api/auth/refresh
	•	POST /api/auth/logout
	•	Middleware protects all CRUD endpoints below.

	6.	CRUD APIs

	•	Menu
	•	POST /api/menu (multipart: name, desc, price, category, image?) → store image, save public URL
	•	PUT /api/menu/:id (multipart optional)
	•	DELETE /api/menu/:id → remove row; if image URL exists and storage is configured, delete object
	•	Gallery
	•	POST /api/gallery (multipart: image, alt)
	•	DELETE /api/gallery/:id
	•	Events
	•	POST /api/events (title, date, desc, cover? multipart)
	•	PUT /api/events/:id
	•	DELETE /api/events/:id
	•	Reservations
	•	GET /api/reservations (filters: date/status)
	•	PUT /api/reservations/:id (confirm/cancel/note)
	•	DELETE /api/reservations/:id
	•	Feedback
	•	GET /api/feedback (paginated)
	•	DELETE /api/feedback/:id
	•	Contacts
	•	GET /api/contacts
	•	DELETE /api/contacts/:id
	•	Use Drizzle schemas with FKs; validate payloads with Zod; JSON responses; structured error logs with a traceId.

	7.	Image pipeline (activate when storage secrets are set)

	•	Accept jpeg/png/webp ≤ 2MB. Resize to max width 1920, convert to WebP, keep aspect.
	•	Filename: ${table}/${id}-${hash}.webp
	•	Store to S3-compatible bucket; persist only the public URL in DB.

	8.	Google Reviews (Places)

	•	Server route: GET /api/reviews
	•	Uses GOOGLE_PLACES_API_KEY + GOOGLE_PLACE_ID
	•	Cache responses for 6h (server memory or KV). Return sanitized fields: author_name, rating, text, time.
	•	Render on server so the reviews appear in HTML for SEO.

	9.	i18n cleanup

	•	Centralize strings in /i18n/de.json and /i18n/en.json. No hardcoded DE/EN in components.
	•	Locale middleware for /de/* and /en/*. Ensure switching locales swaps all strings.

	10.	SEO + social

	•	Add /robots.txt and /sitemap.xml at build.
	•	Add page-level meta: title, description, OpenGraph, Twitter cards.
	•	Ensure favicon.ico and manifest.webmanifest are present.

	11.	Performance

	•	Static: Cache-Control: public, max-age=31536000, immutable
	•	API GET: Cache-Control: public, max-age=300, stale-while-revalidate=60
	•	Enable Brotli/gzip.
	•	Code-split noncritical sections; tree-shake icon packs; lazy-load gallery/map.

	12.	Security

	•	Helmet/CSP:
	•	default-src 'self'
	•	img-src 'self' data: https:
	•	script-src 'self' 'unsafe-inline' (remove inline usage later)
	•	HSTS; rate-limit auth and form endpoints; CSRF token on dashboard POSTs; cookies httpOnly, secure, SameSite=Lax.

	13.	Domains, redirects, CORS

	•	Choose a primary domain (la-cantina.replit.app or servepos.online) and 301 redirect the other; set <link rel="canonical"> accordingly.
	•	If cross-origin calls occur, set Access-Control-Allow-Origin to the exact allowed origins only.

	14.	Build/Run

	•	Node 20+. Expose on 0.0.0.0 with PORT from env.
	•	Next.js: .replit run command npm run build && npm run start.
	•	Vite/Node SSR: server.listen(process.env.PORT || 3000, '0.0.0.0').

	15.	Drizzle migrations

	•	Run pending migrations. No destructive ops. /api/ready must pass after migrations.

	16.	Logging/observability

	•	JSON logs with level,msg,traceId,reqId. Error boundary surfaces traceId on 5xx.

Acceptance checks (run and paste results)

primary="https://la-cantina.replit.app"
secondary="https://servepos.online"

for host in "$primary" "$secondary"; do
  echo "== $host =="
  curl -sS -o /dev/null -w "Status:%{http_code} Type:%{content_type} Time:%{time_total}\n" "$host"
  curl -sS "$host/api/health" || true
  curl -sS "$host/api/ready" || true
  curl -sS "$host/api/version" || true
  curl -sS "$host/robots.txt" | head -n 5 || true
  curl -sS "$host/sitemap.xml" | head -n 5 || true
done

Proceed in order and report after each section passes the acceptance checks.