Use this exact checklist with the Replit agent. Execute in order. Do not skip any step. Confirm acceptance criteria before moving to the next.

0) Baseline and Environment
	•	Set Node to LTS 20.x in Replit Nix/Packages.
	•	Lock package manager to pnpm and enable store caching.
	•	Remove unused dev servers from .replit/replit.nix.
	•	Acceptance: node -v shows 20.x; pnpm -v works; project installs cleanly with pnpm install.

1) Production Build Only (no dev server in prod)
	•	Ensure package.json has:
	•	"build": "react-scripts build" or Vite "build": "vite build".
	•	Add "start": "node server.js".
	•	Create server.js (Express static server):

const express = require('express');
const path = require('path');
const compression = require('compression');
const app = express();
app.use(compression());
app.use((_,res,next)=>{ // security + caching
  res.setHeader('Cache-Control','public, max-age=31536000, immutable');
  next();
});
app.use(express.static(path.join(__dirname,'build'), { index:false, maxAge:'365d', immutable:true }));
app.get('*', (_,res)=>res.sendFile(path.join(__dirname,'build','index.html')));
const port=process.env.PORT||3000;
app.listen(port,'0.0.0.0',()=>console.log('listening',port));


	•	Update .replit run command to:

run = ["bash","-lc","pnpm install --frozen-lockfile && pnpm build && node server.js"]


	•	Acceptance: app serves minified assets from /static/ with gzip; no dev overlay; first load < 2s on Replit warm instance.

2) Switch to Vite (if using CRA)
	•	Migrate to Vite for faster builds and smaller bundles.
	•	pnpm create vite@latest (framework: React).
	•	Move src/ and public/ over; replace index.html root.
	•	Install: pnpm add react react-dom and needed deps; pnpm add -D vite @vitejs/plugin-react.
	•	Update imports and environment vars (import.meta.env).
	•	Acceptance: pnpm build produces dist/ with smaller total JS than CRA build; app runs via server.js using dist instead of build.

3) Bundle Size Audit and Trimming
	•	Install analyzer: pnpm add -D source-map-explorer (CRA) or rollup-plugin-visualizer (Vite).
	•	Generate report; identify heavy deps:
	•	Replace Moment.js → Day.js or native Intl.
	•	Import lodash per function (lodash-es/babel plugin) not lodash.
	•	Remove unused UI icon packs; import icons individually.
	•	Remove large polyfills not needed for your target browsers.
	•	Acceptance: JS payload (sum of main + vendor) reduced by ≥30%.

4) Code Splitting by Route and Feature
	•	Implement React.lazy + Suspense per route:

const MenuPage = React.lazy(()=>import('./pages/Menu'));


	•	Split vendor chunk in Vite via build.rollupOptions.output.manualChunks.
	•	Defer non-critical modules (e.g., charts, map) behind on-demand import.
	•	Acceptance: Initial route < 150KB JS (gzipped) and subsequent route loads dynamically.

5) Kill Re-renders and Heavy Components
	•	Wrap stable child components in React.memo.
	•	Replace inline lambdas with useCallback; objects/arrays with useMemo.
	•	Ensure list items have stable key.
	•	Virtualize long lists using react-window/react-virtualized.
	•	Debounce type-ahead inputs.
	•	Acceptance: React Profiler shows render count drops by ≥50% on common interactions.

6) Images, Fonts, and Static Assets
	•	Convert large images to WebP/AVIF; generate responsive sizes.
	•	Use <img loading="lazy" decoding="async">.
	•	Self-host fonts as WOFF2; subset to used glyphs; add:

<link rel="preload" as="font" type="font/woff2" href="/fonts/YourFont.woff2" crossorigin>
<link rel="preconnect" href="https://your-api-domain">


	•	Remove Google Fonts blocking CSS or use display=swap.
	•	Acceptance: Lighthouse “Performance” ≥ 90 on home, image savings visible in network panel.

7) CSS/JS Minification and Purge
	•	Tailwind: ensure tailwind.config.js content globs are correct; build with NODE_ENV=production to purge unused classes.
	•	Plain CSS: enable PostCSS/CSSNano.
	•	Ensure source maps are disabled for prod (build.sourcemap=false in Vite).
	•	Acceptance: CSS bundle reduced; no .map files served in prod.

8) HTTP Caching and Compression
	•	Confirm compression() is active (gzip). Add Brotli if desired via shrink-ray-current.
	•	Serve hashed filenames (Vite/C RA already do). Ensure Cache-Control: max-age=31536000, immutable on hashed assets and no-cache on index.html.
	•	Acceptance: repeat navigations load from browser cache; network waterfall shows 304/served-from-disk.

9) Third-Party Scripts and Maps
	•	Remove unused analytics/chat widgets for now.
	•	Load non-critical scripts with async or defer.
	•	Gate Google Maps and similar heavy widgets behind user interaction (button → load map).
	•	Acceptance: main thread idle within 1s after First Contentful Paint.

10) API/State Performance
	•	Batch network calls; avoid sequential awaits on render.
	•	Add SWR/React Query with caching and stale-while-revalidate.
	•	Add optimistic UI for common mutations.
	•	Acceptance: fewer XHRs, reduced blocking; UI remains responsive during fetches.

11) Service Worker Caching (optional)
	•	Add Workbox to precache static assets and runtime cache images/API.
	•	Acceptance: subsequent visits load near-instantly; offline basic shell works.

12) Replit-Specific Cold Start Mitigation
	•	Ensure process starts fast: avoid heavy CPU work on boot; lazy-load server-only modules.
	•	Move build step to install time if possible; run pnpm build once, then node server.js.
	•	Acceptance: cold start time reduced; server logs “listening …” in <5s after Run.

13) Monitoring and Budgets
	•	Add a lighthouse-ci GitHub Action with budgets:
	•	JS ≤ 200KB gz on first load
	•	LCP ≤ 2.5s, TTI ≤ 3s
	•	Fail CI on regressions.
	•	Acceptance: CI passes; budgets enforce future discipline.

14) Final Verification
	•	Clear cache, throttle to “Fast 3G” in DevTools, emulate iPhone 12.
	•	Verify:
	•	First load < 3s to interactive
	•	No red console errors
	•	Route changes < 300ms
	•	Admin and heavy pages lazy-load features without blocking main thread
	•	Produce a one-page report with before/after payload sizes, LCP/CLS/TTI, and screenshots.

Instructions to the agent: apply each step, post the acceptance evidence (numbers, screenshots of bundle reports/Lighthouse) before proceeding.