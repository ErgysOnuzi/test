Message for Replit agent — implement now

Scope

* Move the listed Instagram posts to the homepage as embedded iframes (no Graph API).
* Remove Instagram items from Gallery; Gallery shows only uploaded images.
* Raise Gallery bulk upload limit to 120 images per operation (client + server + storage).
* Update CSP to allow Instagram iframes.

Instagram embeds on homepage

* Posts (10):

  * [https://www.instagram.com/p/DAvXTRFidcu/](https://www.instagram.com/p/DAvXTRFidcu/)
  * [https://www.instagram.com/p/C\_vwvupNoNR/](https://www.instagram.com/p/C_vwvupNoNR/)
  * [https://www.instagram.com/p/C8HwJgmt8aL/](https://www.instagram.com/p/C8HwJgmt8aL/)
  * [https://www.instagram.com/p/C6gz8uSiGlb/](https://www.instagram.com/p/C6gz8uSiGlb/)
  * [https://www.instagram.com/p/C6Mg0uGLdNH/](https://www.instagram.com/p/C6Mg0uGLdNH/)
  * [https://www.instagram.com/p/C4lqzQMrscT/](https://www.instagram.com/p/C4lqzQMrscT/)
  * [https://www.instagram.com/p/C4kriK-NmpI/](https://www.instagram.com/p/C4kriK-NmpI/)
  * [https://www.instagram.com/p/C0e\_9IcLnk-/](https://www.instagram.com/p/C0e_9IcLnk-/)
  * [https://www.instagram.com/p/Cztz53rN1km/](https://www.instagram.com/p/Cztz53rN1km/)
  * [https://www.instagram.com/p/CroTpxftUqg/](https://www.instagram.com/p/CroTpxftUqg/)
* Create reusable component:

```tsx
// components/InstagramEmbed.tsx
import { useMemo } from "react";

type Props = { url: string; aspect?: number };
export default function InstagramEmbed({ url, aspect = 1.25 }: Props) {
  const shortcode = useMemo(() => {
    try {
      const u = new URL(url);
      const parts = u.pathname.split("/").filter(Boolean);
      return parts[1]; // '/p/{shortcode}/'
    } catch { return ""; }
  }, [url]);
  if (!shortcode) return null;

  return (
    <div style={{ position: "relative", width: "100%", paddingTop: `${aspect * 100}%` }}>
      <iframe
        src={`https://www.instagram.com/p/${shortcode}/embed`}
        title={`ig-${shortcode}`}
        style={{ position: "absolute", inset: 0, width: "100%", height: "100%", border: 0, overflow: "hidden" }}
        allowTransparency
        loading="lazy"
      />
    </div>
  );
}
```

* Render in homepage IG section (keep existing grid classes):

```tsx
// pages/index.tsx (or home section)
import InstagramEmbed from "@/components/InstagramEmbed";

const IG_URLS = [
  "https://www.instagram.com/p/DAvXTRFidcu/",
  "https://www.instagram.com/p/C_vwvupNoNR/",
  "https://www.instagram.com/p/C8HwJgmt8aL/",
  "https://www.instagram.com/p/C6gz8uSiGlb/",
  "https://www.instagram.com/p/C6Mg0uGLdNH/",
  "https://www.instagram.com/p/C4lqzQMrscT/",
  "https://www.instagram.com/p/C4kriK-NmpI/",
  "https://www.instagram.com/p/C0e_9IcLnk-/",
  "https://www.instagram.com/p/Cztz53rN1km/",
  "https://www.instagram.com/p/CroTpxftUqg/",
];

<div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-4">
  {IG_URLS.map(u => <InstagramEmbed key={u} url={u} />)}
</div>
```

Gallery: only uploaded photos

* If DB has a `source` column, ensure Gallery queries `WHERE source='upload'`.
* If IG items exist in Gallery table, migrate or exclude them at fetch.
* Remove any job/function that inserts IG into Gallery.

Bulk upload: 120 images

* Frontend: enforce 120 max, multiple input.

```tsx
// components/admin/GalleryUploader.tsx
function GalleryUploader() {
  const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const files = Array.from(e.target.files ?? []);
    if (files.length > 120) { alert("Max 120 images per upload."); e.target.value = ""; return; }
    // proceed to upload
  };
  return <input type="file" accept="image/*" multiple onChange={onChange} />;
}
export default GalleryUploader;
```

* API (Next.js + formidable) — cap at 120, 20MB/file, images only:

```ts
// pages/api/gallery/upload.ts
import type { NextApiRequest, NextApiResponse } from "next";
import formidable, { File } from "formidable";
import { uploadToStorageAndDB } from "@/lib/gallery";

export const config = { api: { bodyParser: false } };

export default function handler(req: NextApiRequest, res: NextApiResponse) {
  if (req.method !== "POST") return res.status(405).end();

  const form = formidable({
    multiples: true,
    maxFiles: 120,
    maxFileSize: 20 * 1024 * 1024,
    filter: ({ mimetype }) => !!mimetype && mimetype.startsWith("image/"),
  });

  form.parse(req, async (err, _fields, files) => {
    if (err) return res.status(400).json({ error: String(err) });

    const raw = files["files"] ?? files["file"] ?? [];
    const list: File[] = Array.isArray(raw) ? raw : [raw];
    const clean = list.filter(Boolean);
    if (clean.length === 0) return res.status(400).json({ error: "No files" });
    if (clean.length > 120) return res.status(413).json({ error: "Max 120 files per upload" });

    try {
      const results = await uploadToStorageAndDB(clean);
      return res.status(200).json({ ok: true, count: results.length });
    } catch (e: any) {
      return res.status(500).json({ error: e.message || "Upload failed" });
    }
  });
}
```

* Storage/DB:

  * Path: `gallery/{yyyy}/{mm}/{uuid-filename}`
  * Insert rows in batches; set `source='upload'`; store width/height if available.
  * Paginate admin listing (e.g., 30/page) to avoid heavy payloads.

CSP/headers

* Add/merge:

  * `frame-src https://www.instagram.com https://*.instagram.com https://*.cdninstagram.com;`
  * `img-src https://*.cdninstagram.com data:;`
* No Instagram in `script-src` required due to iframe approach.

Proxy/body limits

* Ensure any server/proxy limits allow 120 images; raise request size/timeouts accordingly.

Acceptance tests

* Homepage shows the 10 Instagram iframes in the existing IG grid without layout shift.
* Gallery view excludes all IG items.
* Upload succeeds with 120 images; rejects with 121.
* No CSP console errors; Lighthouse layout shift score unaffected.
* Admin pagination remains performant with large galleries.
